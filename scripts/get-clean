#!/bin/bash

CACHE_FILE=clean-env.tgz
declare -a FILES_TO_EXECUTE=

function print_usage {
	echo "Usage: $0 [options] [script.st] [script2.st] ...
Where options can any combination of:
	--alpha same as --release=alpha+vm
	--clean dont download just clean the environment (this includes the image and changes)
	--force-32 force 32 bit version (default is os architecture)
	--fresh to ignore the cache file [$CACHE_FILE]
	--release=<release> will download the indicated release, default is stable+vm
	--help for this message

Any argument ending with .st will be read as a file, evaluated and then save the image.
Files are evaluated in order of appearance.
" 1>&2
	exit -1
}

while [[ $# -gt 0 ]]; do
	case "$1" in
		--alpha)
			RELEASE=alpha+vm
			echo "Using release $RELEASE"
			;;
		--clean)
			DOWNLOAD=NO
			;;
		--force-32)
			PHARO_URL=get.pharo.org
			;;
		--fresh)
			echo "Cleaning Cache" && rm -f "$CACHE_FILE"
			;;
		--release=*)
			RELEASE=${1##--release=}
			echo "Using release $RELEASE"
			;;
		*.st)
			FILES_TO_EXECUTE+=("$(readlink -e "$1")")
			;;
		--help)
			print_usage
			;;
		*)
			echo "Unrecognized option $1"
			print_usage
			;;
	esac
	shift
done

if [ -z "$PHARO_URL" ]; then
	if [ "$(uname -m)" == "x86_64" ] && [ "$(uname -s | head -c 5)" != "MINGW" ]; then
		PHARO_URL=get.pharo.org/64
	else
		PHARO_URL=get.pharo.org
	fi
fi

RELEASE_URL="${PHARO_URL}/${RELEASE:-stable+vm}"

# Clean Environment
echo "Cleaning Environment"
find . -maxdepth 1 -not \( -name "." -o -name "$CACHE_FILE" -o -name "$(basename "$0")" -o -name "startup.st" -o -name "user-properties" \) -exec rm -rf {} \;

if [ "$DOWNLOAD" != "NO" ]; then
	if [ -f "$CACHE_FILE" ]; then
		echo "Restoring from Cache"
		tar --gzip --extract --file "$CACHE_FILE"
	else
		echo "Downloading Pharo from $RELEASE_URL"
		if which curl > /dev/null; then
		   	curl --fail --silent --show-error --location "${RELEASE_URL}" | bash
		else
			wget --output-document - --quiet "${RELEASE_URL}" | bash
		fi

		echo "Saving downloaded files to Cache"
		tar --gzip --create --file "$CACHE_FILE" --exclude="$CACHE_FILE" --exclude="$(basename "$0")" --exclude="startup.st" --exclude="user-properties" ./*
	fi
fi

if [ -f pharo ]; then
	for script in "${FILES_TO_EXECUTE[@]}"; do
		if [ ! -z "$script" ]; then
			echo "Executing $script"
			./pharo Pharo.image eval """
			$(cat "$script").
			SmalltalkImage current
			closeSourceFiles;
			openSourceFiles;
			snapshot: true andQuit: true
			"""
		fi
	done
fi

